library(tidyverse)
################## ADD YOUR CODE UNDER THIS LINE #######
# Find out the function of the most highly downregulated gene in Variety X
top_gene.x <- var_x_degs.down[which.min(var_x_degs.down$log2FoldChange), "Gene_Function"]
library(testthat)
library(assertthat)
library(stringr)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(ggvenn)
library(testthat)
library(assertthat)
library(stringr)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(ggvenn)
################## ADD YOUR CODE UNDER THIS LINE #######
var_x_all <- read.csv("Matrix/all_VarX_TwoTimePoints.csv")
var_y_all <- read.csv("Matrix/all_VarY_TwoTimePoints.csv")
dim(var_x_all)
dim(var_y_all)
################## ADD YOUR CODE UNDER THIS LINE #######
num_genes <- nrow(var_x_all)
num_genes
new_data <- bind_rows(var_x_all, var_y_all)
new_data%>%
distinct(gene_name) %>%
nrow()
################## ADD YOUR CODE UNDER THIS LINE #######
var_x_degs <- read.csv("Matrix/Leaf_DEGs_VarX.csv")
var_y_degs <- read.csv("Matrix/Leaf_DEGs_VarY.csv")
var_x_all.long <- pivot_longer(var_x_all,cols=VarXCRep.1:VarX1Rep.3,names_to = "sample", values_to = "expression")
#View(var_x_all.long)
################## ADD YOUR CODE UNDER THIS LINE #######
ggplot(var_x_all.long, aes(x = sample, y = expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for All Genes (Variety X)")
################## ADD YOUR CODE UNDER THIS LINE #######
var_y_all.long <- pivot_longer(var_y_all, cols = VarYCRep.1:VarY1Rep.3, names_to = "sample", values_to = "expression")
# Create a boxplot
ggplot(var_y_all.long, aes(x = sample, y = expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for All Genes (Variety Y)")
################## ADD YOUR CODE UNDER THIS LINE #######
var_x_degs.long <- pivot_longer(var_x_degs, cols = VarXCRep.1:VarX1Rep.3, names_to = "sample", values_to = "expression")
# Create a boxplot
ggplot(var_x_degs.long, aes(x = sample, y = expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety X)")
var_x_degs.long$expression2 <- log(var_x_degs.long$expression + 1)
ggplot(var_x_degs.long, aes(x = sample, y = expression2)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety X)")
################## ADD YOUR CODE UNDER THIS LINE #######
var_y_degs.long <- pivot_longer(var_y_degs, cols = VarYCRep.1:VarY1Rep.3, names_to = "sample", values_to = "expression")
# Create a boxplot
ggplot(var_y_degs.long, aes(x = sample, y = expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety Y)")
var_y_degs.long$expression2 <- log(var_y_degs.long$expression + 1)
ggplot(var_y_degs.long, aes(x = sample, y = expression2)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety Y)")
combined_degs.long <- rbind(var_y_degs.long, var_x_degs.long)
combined_degs.long <- combined_degs.long %>%
mutate(variety = gsub("Var([XY]).*", "\\1", sample)) %>%
mutate(sample = gsub("Var[XY]", "", sample))
ggplot(combined_degs.long, aes(x = sample, y = expression2, color = variety)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety Y)")
################## ADD YOUR CODE UNDER THIS LINE #######
var_x_dup <- sum(duplicated(var_x_degs$gene_name))
var_y_dup <- sum(duplicated(var_y_degs$gene_name))
var_x_dup
var_y_dup
# remove duplicates for x varieties
var_x_degs <- var_x_degs %>%
distinct(gene_name, .keep_all = TRUE)
# remove duplicates for y variesties
var_y_degs <- var_y_degs %>%
distinct(gene_name, .keep_all = TRUE)
################## ADD YOUR CODE UNDER THIS LINE #######
venn_genes <- ggvenn(list("Variety X" = var_x_degs$gene_name, "Variety Y" = var_y_degs$gene_name))
venn_genes
################## ADD YOUR CODE UNDER THIS LINE #######
var_x_degs.up <- var_x_degs[var_x_degs$log2FoldChange > 0, ]
var_x_degs.down <- var_x_degs[var_x_degs$log2FoldChange < 0, ]
var_y_degs.up <- var_y_degs[var_y_degs$log2FoldChange > 0, ]
var_y_degs.down <- var_y_degs[var_y_degs$log2FoldChange < 0, ]
################## ADD YOUR CODE UNDER THIS LINE #######
# Create a box plot to show the distribution of log2 fold change for all DEGs by variety
boxplot(var_x_degs$log2FoldChange, var_y_degs$log2FoldChange, names = c("Variety X", "Variety Y"), main = "Distribution of log2 Fold Change for All DEGs", ylab = "log2 Fold Change")
# Create a box plot to show the distribution of log2 fold change for upregulated DEGs by variety
boxplot(var_x_degs.up$log2FoldChange, var_y_degs.up$log2FoldChange, names = c("Variety X", "Variety Y"), main = "Distribution of log2 Fold Change for Upregulated DEGs", ylab = "log2 Fold Change")
# Create a box plot to show the distribution of log2 fold change for downregulated DEGs by variety
boxplot(var_x_degs.down$log2FoldChange, var_y_degs.down$log2FoldChange, names = c("Variety X", "Variety Y"), main = "Distribution of log2 Fold Change for Downregulated DEGs", ylab = "log2 Fold Change")
# get common genes and compare their expressions between the two variesties
common_genes <- intersect(var_x_degs$gene_name, var_y_degs$gene_name)
var_x_degs_common <- var_x_degs%>%filter(gene_name %in% common_genes)
var_y_degs_common <- var_y_degs%>%filter(gene_name %in% common_genes)
boxplot(var_x_degs_common$log2FoldChange, var_x_degs_common$log2FoldChange, names = c("Variety X", "Variety Y"), main = "Distribution of log2 Fold Change for All DEGs", ylab = "log2 Fold Change")
# get common genes and compare their expressions between the two varieties
common_genes <- intersect(var_x_degs$gene_name, var_y_degs$gene_name)
var_x_degs_common.up <- var_x_degs.up%>%filter(gene_name %in% common_genes)
var_y_degs_common.up <- var_y_degs.up%>%filter(gene_name %in% common_genes)
boxplot(var_x_degs_common.up$log2FoldChange, var_x_degs_common.up$log2FoldChange, names = c("Variety X", "Variety Y"), main = "Distribution of log2 Fold Change for All DEGs", ylab = "log2 Fold Change")
# get common genes and compare their expressions between the two varieties
common_genes.down <- intersect(var_x_degs$gene_name, var_y_degs$gene_name)
var_x_degs_common.down <- var_x_degs.down%>%filter(gene_name %in% common_genes)
var_y_degs_common.down <- var_y_degs.down%>%filter(gene_name %in% common_genes)
boxplot(var_x_degs_common.down$log2FoldChange, var_x_degs_common.down$log2FoldChange, names = c("Variety X", "Variety Y"), main = "Distribution of log2 Fold Change for All DEGs", ylab = "log2 Fold Change")
# get common genes and compare their expressions between the two variesties
common_genes <- intersect(var_x_degs$gene_name, var_y_degs$gene_name)
var_x_degs_common <- var_x_degs%>%filter(gene_name %in% common_genes)
var_y_degs_common <- var_y_degs%>%filter(gene_name %in% common_genes)
boxplot(var_x_degs_common$log2FoldChange, var_x_degs_common$log2FoldChange, names = c("Variety X", "Variety Y"), main = "Distribution of log2 Fold Change for All DEGs", ylab = "log2 Fold Change")
################## ADD YOUR CODE UNDER THIS LINE #######
# Find out the function of the most highly downregulated gene in Variety X
top_gene.x <- var_x_degs.down[which.min(var_x_degs.down$log2FoldChange), "Gene_Function"]
# Find out the function of the most highly downregulated gene in Variety Y
top_gene.y <- var_y_degs.down[which.min(var_y_degs.down$log2FoldChange), "Gene_Function"]
print("Top most down regulated gene in variety x")
top_gene.x
print("Top most down regulated gene in variety y")
top_gene.y
# x variety up regulated genes' functions
tail(var_x_degs.up[order(var_x_degs.up$log2FoldChange), ],5)[["Gene_Function"]]
# y variety up regulated genes' functions
tail(var_y_degs.up[order(var_y_degs.up$log2FoldChange), ],5)[["Gene_Function"]]
# x variety down regulated genes' functions
top_down_genes_x <- head(var_x_degs.down[order(var_x_degs.down$log2FoldChange), ],5)[,c("gene_name", "Gene_Function")]
print(top_down_genes_x)
# x variety down regulated genes' functions
head(var_y_degs.down[order(var_y_degs.down$log2FoldChange), ],5)[["Gene_Function"]]
################## ADD YOUR CODE UNDER THIS LINE #######
# Find out the function of the most highly upregulated gene in Variety X
top_gene.x.up <- var_x_degs.down[which.max(var_x_degs.down$log2FoldChange), "Gene_Function"]
# Find out the function of the most highly upregulated gene in Variety Y
top_gene.y.up <- var_y_degs.down[which.max(var_y_degs.down$log2FoldChange), "Gene_Function"]
print("Top most down regulated gene in variety x")
top_gene.x.up
print("Top most down regulated gene in variety y")
top_gene.y.up
################## ADD YOUR CODE UNDER THIS LINE #######
# Find out the function of the most highly upregulated gene in Variety X
top_gene.x.up <- var_x_degs.down[which.max(var_x_degs.down$log2FoldChange), "Gene_Function"]
# Find out the function of the most highly upregulated gene in Variety Y
top_gene.y.up <- var_y_degs.down[which.max(var_y_degs.down$log2FoldChange), "Gene_Function"]
print("Top most up regulated gene in variety x")
top_gene.x.up
print("Top most up regulated gene in variety y")
top_gene.y.up
################## ADD YOUR CODE UNDER THIS LINE #######
# Filter genes in Variety X that are downregulated, have at least a 2-fold absolute change, and p value less than 1e-04
var_x_degs.down.big <- var_x_degs.down[2^abs(var_x_degs.down$log2FoldChange) >= 2 & var_x_degs.down$padj < 1e-04, ]
# View the filtered data frame
View(var_x_degs.down.big)
library(testthat)
library(assertthat)
library(stringr)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(ggvenn)
################## ADD YOUR CODE UNDER THIS LINE #######
var_x_all <- read.csv("Matrix/all_VarX_TwoTimePoints.csv")
var_y_all <- read.csv("Matrix/all_VarY_TwoTimePoints.csv")
dim(var_x_all)
dim(var_y_all)
################## ADD YOUR CODE UNDER THIS LINE #######
num_genes <- nrow(var_x_all)
num_genes
new_data <- bind_rows(var_x_all, var_y_all)
new_data%>%
distinct(gene_name) %>%
nrow()
################## ADD YOUR CODE UNDER THIS LINE #######
var_x_degs <- read.csv("Matrix/Leaf_DEGs_VarX.csv")
var_y_degs <- read.csv("Matrix/Leaf_DEGs_VarY.csv")
var_x_all.long <- pivot_longer(var_x_all,cols=VarXCRep.1:VarX1Rep.3,names_to = "sample", values_to = "expression")
#View(var_x_all.long)
################## ADD YOUR CODE UNDER THIS LINE #######
ggplot(var_x_all.long, aes(x = sample, y = expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for All Genes (Variety X)")
################## ADD YOUR CODE UNDER THIS LINE #######
var_y_all.long <- pivot_longer(var_y_all, cols = VarYCRep.1:VarY1Rep.3, names_to = "sample", values_to = "expression")
# Create a boxplot
ggplot(var_y_all.long, aes(x = sample, y = expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for All Genes (Variety Y)")
################## ADD YOUR CODE UNDER THIS LINE #######
var_x_degs.long <- pivot_longer(var_x_degs, cols = VarXCRep.1:VarX1Rep.3, names_to = "sample", values_to = "expression")
# Create a boxplot
ggplot(var_x_degs.long, aes(x = sample, y = expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety X)")
var_x_degs.long$log10expression <- log(var_x_degs.long$expression + 1)
ggplot(var_x_degs.long, aes(x = sample, y = log10expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety X)")
################## ADD YOUR CODE UNDER THIS LINE #######
var_y_degs.long <- pivot_longer(var_y_degs, cols = VarYCRep.1:VarY1Rep.3, names_to = "sample", values_to = "expression")
# Create a boxplot
ggplot(var_y_degs.long, aes(x = sample, y = expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety Y)")
var_y_degs.long$log10expression <- log(var_y_degs.long$expression + 1)
ggplot(var_y_degs.long, aes(x = sample, y = log10expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety Y)")
combined_degs.long <- rbind(var_y_degs.long, var_x_degs.long)
combined_degs.long <- combined_degs.long %>%
mutate(variety = gsub("Var([XY]).*", "\\1", sample)) %>%
mutate(sample = gsub("Var[XY]", "", sample))
ggplot(combined_degs.long, aes(x = sample, y = log10expression, color = variety)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety Y)")
################## ADD YOUR CODE UNDER THIS LINE #######
var_x_dup <- sum(duplicated(var_x_degs$gene_name))
var_y_dup <- sum(duplicated(var_y_degs$gene_name))
var_x_dup
var_y_dup
# remove duplicates for x varieties
var_x_degs <- var_x_degs %>%
distinct(gene_name, .keep_all = TRUE)
# remove duplicates for y variesties
var_y_degs <- var_y_degs %>%
distinct(gene_name, .keep_all = TRUE)
################## ADD YOUR CODE UNDER THIS LINE #######
venn_genes <- ggvenn(list("Variety X" = var_x_degs$gene_name, "Variety Y" = var_y_degs$gene_name))
venn_genes
################## ADD YOUR CODE UNDER THIS LINE #######
var_x_degs.up <- var_x_degs[var_x_degs$log2FoldChange > 0, ]
var_x_degs.down <- var_x_degs[var_x_degs$log2FoldChange < 0, ]
var_y_degs.up <- var_y_degs[var_y_degs$log2FoldChange > 0, ]
var_y_degs.down <- var_y_degs[var_y_degs$log2FoldChange < 0, ]
################## ADD YOUR CODE UNDER THIS LINE #######
var_x_degs.up <- var_x_degs[var_x_degs$log2FoldChange > 0, ]
var_x_degs.down <- var_x_degs[var_x_degs$log2FoldChange < 0, ]
var_y_degs.up <- var_y_degs[var_y_degs$log2FoldChange > 0, ]
var_y_degs.down <- var_y_degs[var_y_degs$log2FoldChange < 0, ]
################## ADD YOUR CODE UNDER THIS LINE #######
# Create a box plot to show the distribution of log2 fold change for all DEGs by variety
boxplot(var_x_degs$log2FoldChange, var_y_degs$log2FoldChange, names = c("Variety X", "Variety Y"), main = "Distribution of log2 Fold Change for All DEGs", ylab = "log2 Fold Change")
# Create a box plot to show the distribution of log2 fold change for upregulated DEGs by variety
boxplot(var_x_degs.up$log2FoldChange, var_y_degs.up$log2FoldChange, names = c("Variety X", "Variety Y"), main = "Distribution of log2 Fold Change for Upregulated DEGs", ylab = "log2 Fold Change")
# Create a box plot to show the distribution of log2 fold change for downregulated DEGs by variety
boxplot(var_x_degs.down$log2FoldChange, var_y_degs.down$log2FoldChange, names = c("Variety X", "Variety Y"), main = "Distribution of log2 Fold Change for Downregulated DEGs", ylab = "log2 Fold Change")
# get common genes and compare their expressions between the two variesties
common_genes <- intersect(var_x_degs$gene_name, var_y_degs$gene_name)
var_x_degs_common <- var_x_degs%>%filter(gene_name %in% common_genes)
var_y_degs_common <- var_y_degs%>%filter(gene_name %in% common_genes)
boxplot(var_x_degs_common$log2FoldChange, var_x_degs_common$log2FoldChange, names = c("Variety X", "Variety Y"), main = "Distribution of log2 Fold Change for All DEGs", ylab = "log2 Fold Change")
# get common genes and compare their expressions between the two varieties
common_genes <- intersect(var_x_degs$gene_name, var_y_degs$gene_name)
var_x_degs_common.up <- var_x_degs.up%>%filter(gene_name %in% common_genes)
var_y_degs_common.up <- var_y_degs.up%>%filter(gene_name %in% common_genes)
boxplot(var_x_degs_common.up$log2FoldChange, var_x_degs_common.up$log2FoldChange, names = c("Variety X", "Variety Y"), main = "Distribution of log2 Fold Change for All DEGs", ylab = "log2 Fold Change")
# get common genes and compare their expressions between the two varieties
common_genes.down <- intersect(var_x_degs$gene_name, var_y_degs$gene_name)
var_x_degs_common.down <- var_x_degs.down%>%filter(gene_name %in% common_genes)
var_y_degs_common.down <- var_y_degs.down%>%filter(gene_name %in% common_genes)
boxplot(var_x_degs_common.down$log2FoldChange, var_x_degs_common.down$log2FoldChange, names = c("Variety X", "Variety Y"), main = "Distribution of log2 Fold Change for All DEGs", ylab = "log2 Fold Change")
# get common genes and compare their expressions between the two variesties
common_genes <- intersect(var_x_degs$gene_name, var_y_degs$gene_name)
var_x_degs_common <- var_x_degs%>%filter(gene_name %in% common_genes)
var_y_degs_common <- var_y_degs%>%filter(gene_name %in% common_genes)
boxplot(var_x_degs_common$log2FoldChange, var_x_degs_common$log2FoldChange, names = c("Variety X", "Variety Y"), main = "Distribution of log2 Fold Change for All DEGs", ylab = "log2 Fold Change")
################## ADD YOUR CODE UNDER THIS LINE #######
# Find out the function of the most highly downregulated gene in Variety X
top_gene.x <- var_x_degs.down[which.min(var_x_degs.down$log2FoldChange), "Gene_Function"]
# Find out the function of the most highly downregulated gene in Variety Y
top_gene.y <- var_y_degs.down[which.min(var_y_degs.down$log2FoldChange), "Gene_Function"]
print("Top most down regulated gene in variety x")
top_gene.x
print("Top most down regulated gene in variety y")
top_gene.y
################## ADD YOUR CODE UNDER THIS LINE #######
# Find out the function of the most highly upregulated gene in Variety X
top_gene.x.up <- var_x_degs.down[which.max(var_x_degs.down$log2FoldChange), "Gene_Function"]
# Find out the function of the most highly upregulated gene in Variety Y
top_gene.y.up <- var_y_degs.down[which.max(var_y_degs.down$log2FoldChange), "Gene_Function"]
print("Top most up regulated gene in variety x")
top_gene.x.up
print("Top most up regulated gene in variety y")
top_gene.y.up
# x variety up regulated genes' functions
tail(var_x_degs.up[order(var_x_degs.up$log2FoldChange), ],5)[["Gene_Function"]]
# y variety up regulated genes' functions
tail(var_y_degs.up[order(var_y_degs.up$log2FoldChange), ],5)[["Gene_Function"]]
# y variety up regulated genes' functions
tail(var_y_degs.up[order(var_y_degs.up$log2FoldChange), ],5)[["Gene_Function"]]
# x variety down regulated genes' functions
top_down_genes_x <- head(var_x_degs.down[order(var_x_degs.down$log2FoldChange), ],5)[,c("gene_name", "Gene_Function")]
print(top_down_genes_x)
# x variety down regulated genes' functions
head(var_y_degs.down[order(var_y_degs.down$log2FoldChange), ],5)[["Gene_Function"]]
################## ADD YOUR CODE UNDER THIS LINE #######
# Create a scatterplot matrix to inspect replicate behavior
pairs(var_x_degs[, c("VarX1Rep.1", "VarX1Rep.2", "VarX1Rep.3")], main = "Scatterplot Matrix for DEGs in Variety X (Treatment Time Point)")
################## ADD YOUR CODE UNDER THIS LINE #######
# Create a scatterplot matrix to inspect replicate behavior
pairs(var_x_degs[, c("VarXCRep.1", "VarXCRep.2", "VarXCRep.3")], main = "Scatterplot Matrix for DEGs in Variety X (Control Time Point)")
################## ADD YOUR CODE UNDER THIS LINE #######
# Calculate mean expression for control replicates
var_x_degs$control_mean <- rowMeans(var_x_degs[, c("VarXCRep.1", "VarXCRep.2", "VarXCRep.3")])
# Calculate mean expression for stress treatment replicates
var_x_degs$stress_mean <- rowMeans(var_x_degs[, c("VarX1Rep.1", "VarX1Rep.2", "VarX1Rep.3")])
# View the modified data frame
View(var_x_degs)
################## ADD YOUR CODE UNDER THIS LINE #######
# Filter genes in Variety X that are downregulated, have at least a 2-fold absolute change, and p value less than 1e-04
var_x_degs.down.big <- var_x_degs.down[2^abs(var_x_degs.down$log2FoldChange) >= 2 & var_x_degs.down$padj < 1e-04, ]
# View the filtered data frame
View(var_x_degs.down.big)
################## ADD YOUR CODE UNDER THIS LINE #######
# Filter genes in Variety X that are upregulated, have at least a 2-fold absolute change, and p value less than 1e-04
var_x_degs.up.big <- var_x_degs.up[2^abs(var_x_degs.up$log2FoldChange) >= 2 & var_x_degs.up$padj < 1e-04, ]
# View the filtered data frame
View(var_x_degs.up.big)
dim(var_x_degs.up.big)
var_x_degs.long$log10expression <- log(var_x_degs.long$expression + 1)
ggplot(var_x_degs.long, aes(x = sample, y = log10expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety X)")
+ theme(plot.title = element_text(hjust = 0.5)
var_x_degs.long$log10expression <- log(var_x_degs.long$expression + 1)
ggplot(var_x_degs.long, aes(x = sample, y = log10expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety X)") +
theme(plot.title = element_text(hjust = 0.5)
var_x_degs.long$log10expression <- log(var_x_degs.long$expression + 1)
ggplot(var_x_degs.long, aes(x = sample, y = log10expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety X)") +
theme(plot.title = element_text(hjust = 0.5))
var_x_degs.long$log10expression <- log(var_x_degs.long$expression + 1)
ggplot(var_x_degs.long, aes(x = sample, y = log10expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety X)") +
theme(plot.title = element_text(hjust = 0.5))
################## ADD YOUR CODE UNDER THIS LINE #######
var_y_degs.long <- pivot_longer(var_y_degs, cols = VarYCRep.1:VarY1Rep.3, names_to = "sample", values_to = "expression")
# Create a boxplot
ggplot(var_y_degs.long, aes(x = sample, y = expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety Y)") +
theme(plot.title = element_text(hjust = 0.5))
var_y_degs.long$log10expression <- log(var_y_degs.long$expression + 1)
ggplot(var_y_degs.long, aes(x = sample, y = log10expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety Y)") +
theme(plot.title = element_text(hjust = 0.5))S
var_y_degs.long$log10expression <- log(var_y_degs.long$expression + 1)
ggplot(var_y_degs.long, aes(x = sample, y = log10expression)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety Y)") +
theme(plot.title = element_text(hjust = 0.5))
combined_degs.long <- rbind(var_y_degs.long, var_x_degs.long)
combined_degs.long <- combined_degs.long %>%
mutate(variety = gsub("Var([XY]).*", "\\1", sample)) %>%
mutate(sample = gsub("Var[XY]", "", sample))
ggplot(combined_degs.long, aes(x = sample, y = log10expression, color = variety)) +
geom_boxplot() +
labs(title = "Distribution of Expression Values for DEGs (Variety Y)") +
theme(plot.title = element_text(hjust = 0.5))
shiny::runApp('Desktop/RNA-Seq-Pipeline-Standard')
runApp('Desktop/RNA-Seq-Pipeline-Standard')
runApp('Desktop/RNA-Seq-Pipeline-Standard')
runApp('Desktop/RNA-Seq-Pipeline-Standard')
runApp('Desktop/RNA-Seq-Pipeline-Standard')
b1
all_DCEGs <- read.csv("data2/all_DCEGs.csv", row.names = 1)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(dendextend)
library(heatmap3)
library(dplyr)
library(tidyverse)
library(scales)
library(sva)
library(ggrepel)
library(patchwork)
all_DCEGs <- read.csv("data2/all_DCEGs.csv", row.names = 1)
all_DCEGs_data <- read.csv("data2/all_DCEGs_data.csv", row.names = 1)
all_DCEGs_data <- read.csv("data2/all_DCEGs_data.csv", row.names = 0)
all_DCEGs_data <- read.csv("data2/all_DCEGs_data.csv")
b<-all_DCEGs_data[["Type", "Batch"]]
all_DCEGs_data
all_DCEGs_data <- read.csv("data2/all_DCEGs_data.csv")
b <- subset(all_DCEGs_data, select = -c("Type", "Batch"))
subset(all_DCEGs_data, select = c("Type", "Batch"))
all_DCEGs_data <- subset(all_DCEGs_data, select = -c("Type", "Batch"))
all_DCEGs_data[, -which(names(all_DCEGs_data) %in% c("Type", "Batch"))]
all_DCEGs_data <- read.csv("data2/all_DCEGs_data.csv")
b <- subset(all_DCEGs_data, select = c("Type", "Batch"))
datx <- all_DCEGs_data[, -which(names(all_DCEGs_data) %in% c("Type", "Batch"))]
b$Batch<-as.factor(b$Batch)
dim(b)
dim(datx)
batch = b$batch
batch
# parametric adjustment
combat_gdata = ComBat(dat= datx, batch= batch, mod=NULL, par.prior=TRUE, prior.plots=FALSE)
combat_edata2 = ComBat(dat=datx, batch=batch, mod=NULL, par.prior=FALSE, mean.only=TR)
combat_edata2 = ComBat(dat=datx, batch=batch, mod=NULL, par.prior=FALSE, mean.only=TRUE)
combat_gdata = ComBat(dat= datx, batch= batch, mod=NULL, par.prior=TRUE, prior.plots=TRUE)
help(ComBat)
limma::removeBatchEffect(datx, batch)
batch_remover = limma::removeBatchEffect
all_DCEGs_data_without_batch = batch_remover(datx, batch)
all_DCEGs_data_without_batch
data <- all_DCEGs_data_without_batch
pca_result <- prcomp(data, scale. = TRUE, center = TRUE)
# Extract PC scores
pca_scores <- data.frame(PC1 = pca_result$x[, 1],
PC2 = pca_result$x[, 2],
Group = metadata[[groups]],
SampleNames = metadata[[samplenames]]
)
b$Sample_Name <- rownames(b)
b
pca_scores <- data.frame(PC1 = pca_result$x[, 1],
PC2 = pca_result$x[, 2],
Group = b[[Type]],
SampleNames = b[[Sample_Name]]
)
pca_scores <- data.frame(PC1 = pca_result$x[, 1],
PC2 = pca_result$x[, 2],
Group = b$Type,
SampleNames = b$Sample_Name
)
# Extract percentage variation from the PCA summary
pc1_percentage <- round(summary(pca_result)$importance[2, 1]*100, 2)
pc2_percentage <- round(summary(pca_result)$importance[2, 2]*100, 2)
# Visualize without sample names
plot1 <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = Group)) +
geom_point(size = 2) +
labs(title = "PCA Scatter Plot",
x = sprintf("PC1 (%.2f%%)", pc1_percentage),
y = sprintf("PC2 (%.2f%%)", pc2_percentage)) +
theme_gray() +
theme(plot.title = element_text(hjust = 0.5))
plot1
data <- all_DCEGs_data
pca_result <- prcomp(data, scale. = TRUE, center = TRUE)
data
data <- datx
pca_result <- prcomp(data, scale. = TRUE, center = TRUE)
# Extract PC scores
pca_scores <- data.frame(PC1 = pca_result$x[, 1],
PC2 = pca_result$x[, 2],
Group = b$Type,
SampleNames = b$Sample_Name
)
# Extract percentage variation from the PCA summary
pc1_percentage <- round(summary(pca_result)$importance[2, 1]*100, 2)
pc2_percentage <- round(summary(pca_result)$importance[2, 2]*100, 2)
# Visualize without sample names
plot2 <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = Group)) +
geom_point(size = 2) +
labs(title = "PCA Scatter Plot",
x = sprintf("PC1 (%.2f%%)", pc1_percentage),
y = sprintf("PC2 (%.2f%%)", pc2_percentage)) +
theme_gray() +
theme(plot.title = element_text(hjust = 0.5))
plot2
help(batch_remover)
help(limma::removeBatchEffect)
help(removeBatchEffect)
unique()
unique(b$Batch)
ngenes <- 10
nsamples <- 8
y <- matrix(rnorm(ngenes*nsamples),ngenes,nsamples)
group <- factor(c("A","A","A","A","B","B","B","B"))
batch <- factor(c(1,1,2,2,1,1,2,2))
colnames(y) <- paste(group,batch,sep=".")
y[,batch==2] <- y[,batch==2] + 5
y[,group=="B"] <- y[,group=="B"] + 1
y.corrected <- removeBatchEffect(y, batch=batch, group=group)
ngenes <- 10
nsamples <- 8
y <- matrix(rnorm(ngenes*nsamples),ngenes,nsamples)
group <- factor(c("A","A","A","A","B","B","B","B"))
batch <- factor(c(1,1,2,2,1,1,2,2))
colnames(y) <- paste(group,batch,sep=".")
y[,batch==2] <- y[,batch==2] + 5
y[,group=="B"] <- y[,group=="B"] + 1
y.corrected <- limma::removeBatchEffect(y, batch=batch, group=group)
oldpar <- par(mfrow=c(1,2))
plotMDS(y,main="Original")
#Load required packages
library(DESeq2)
ngenes <- 10
nsamples <- 8
y <- matrix(rnorm(ngenes*nsamples),ngenes,nsamples)
group <- factor(c("A","A","A","A","B","B","B","B"))
batch <- factor(c(1,1,2,2,1,1,2,2))
colnames(y) <- paste(group,batch,sep=".")
y[,batch==2] <- y[,batch==2] + 5
y[,group=="B"] <- y[,group=="B"] + 1
y.corrected <- limma::removeBatchEffect(y, batch=batch, group=group)
oldpar <- par(mfrow=c(1,2))
plotMDS(y,main="Original")
